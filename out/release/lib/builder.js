// Generated by CoffeeScript 1.6.3
var Builder, EventEmitter, fs, geohash, mkdirp, packGpsInfo, packIndex, packZoneInfo, parseLineText, path, readline, stream, writer, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

readline = require('readline');

stream = require('stream');

mkdirp = require('mkdirp').sync;

EventEmitter = require('events').EventEmitter;

geohash = require('ngeohash').encode;

_ref = require('./util'), packZoneInfo = _ref.packZoneInfo, packGpsInfo = _ref.packGpsInfo, packIndex = _ref.packIndex, parseLineText = _ref.parseLineText;

writer = require('./buffer-writer');

Builder = (function(_super) {
  __extends(Builder, _super);

  function Builder(options) {
    var k;
    this.options = {
      dir: 'data',
      src_file: 'zone_info_town.txt',
      index_length: 5,
      info_packer: 'bin',
      line_parser: 'text'
    };
    for (k in options) {
      if (this.options[k]) {
        this.options[k] = options[k];
      }
    }
    this.lineParser = parseLineText;
    this.packer = packZoneInfo[this.options.info_packer];
    this.dir = this.options.dir;
    mkdirp(this.dir);
    this.data = [];
    this.finfo = {
      packer: this.options.info_packer,
      index: []
    };
    this.on('loaded', function() {
      var i, _i, _ref1,
        _this = this;
      this.buildInfo();
      for (i = _i = 1, _ref1 = this.options.index_length; 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 1 <= _ref1 ? ++_i : --_i) {
        this.buildIndex(i);
      }
      fs.writeFileSync(path.join(this.dir, 'files.json'), JSON.stringify(this.finfo, null, ' '));
      process.nextTick(function() {
        return _this.emit('done');
      });
    });
    this.loadFromFile();
  }

  Builder.prototype.loadFromFile = function() {
    var now, num, rl, size, streamIn, streamOut,
      _this = this;
    size = fs.statSync(this.options.src_file).size;
    this.emit('load_file', 0);
    now = 0;
    streamIn = fs.createReadStream(this.options.src_file);
    streamOut = new stream;
    rl = readline.createInterface(streamIn, streamOut);
    num = 0;
    rl.on('line', function(line) {
      var zone, _i, _len, _ref1;
      _ref1 = _this.lineParser(line);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        zone = _ref1[_i];
        _this.data.push(zone);
      }
      if (0 === num++ % 2000) {
        _this.emit('load_file', now / size * 100);
      }
      return now += Buffer.byteLength(line) + 1;
    });
    return rl.on('close', function() {
      _this.emit('load_file', 100);
      _this.sort().uniq();
      return _this.emit('loaded');
    });
  };

  Builder.prototype.sort = function() {
    this.data.sort(function(a, b) {
      if (a.hash < b.hash) {
        return -1;
      } else {
        return 1;
      }
    });
    return this;
  };

  Builder.prototype.uniq = function() {
    var curr, data, prev, _i, _len, _ref1;
    prev = [];
    data = [];
    _ref1 = this.data;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      curr = _ref1[_i];
      if (prev.lati !== curr.lati || prev.long !== curr.long) {
        data.push(prev = curr);
      }
    }
    this.data = data;
    return this;
  };

  Builder.prototype.buildInfo = function() {
    var buf, gwriter, num, offset, size, zone, zwriter, _i, _len, _ref1;
    size = this.data.length;
    this.emit('build_info', 0);
    zwriter = writer(path.join(this.dir, this.finfo.zone = 'zone.bin'));
    gwriter = writer(path.join(this.dir, this.finfo.gps = 'gps.bin'));
    offset = 0;
    _ref1 = this.data;
    for (num = _i = 0, _len = _ref1.length; _i < _len; num = ++_i) {
      zone = _ref1[num];
      zone.offset = offset;
      offset += (buf = this.packer(zone)).length;
      zwriter.write(buf);
      gwriter.write(packGpsInfo(zone));
      if (0 === num % 2000) {
        this.emit('build_info', num / size * 100);
      }
    }
    zwriter.close();
    gwriter.close();
    this.emit('build_info', 100);
    return this;
  };

  Builder.prototype.buildIndex = function(length) {
    var hash, index, list, now, num, pos, size, w, zone, _i, _len, _ref1;
    index = {};
    size = this.data.length;
    this.emit('build_index', length, 0);
    num = 0;
    _ref1 = this.data;
    for (pos = _i = 0, _len = _ref1.length; _i < _len; pos = ++_i) {
      zone = _ref1[pos];
      hash = geohash(zone.lati, zone.long, length);
      if (index[hash]) {
        index[hash].push(pos);
      } else {
        num++;
        index[hash] = [pos];
      }
      if (0 === pos % 2000) {
        this.emit('build_index', length, pos / size * 100);
      }
    }
    this.emit('build_index', length, 100);
    w = writer(path.join(this.dir, this.finfo.index[length] = "index." + length));
    size = num;
    this.emit('write_index', length, 0);
    now = 0;
    for (hash in index) {
      list = index[hash];
      w.write(packIndex(hash, list[0], list.pop()));
      if (0 === now % 500) {
        this.emit('write_index', length, now / size * 100);
      }
      now++;
    }
    w.close();
    return this.emit('write_index', length, 100);
  };

  return Builder;

})(EventEmitter);

module.exports = function(opt) {
  return new Builder(opt);
};

module.exports.Builder = Builder;
